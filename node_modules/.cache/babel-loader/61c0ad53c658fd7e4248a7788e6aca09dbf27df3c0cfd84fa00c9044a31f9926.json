{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport axios from 'axios';\nexport default {\n  name: 'OrgChart',\n  data() {\n    return {\n      hierarchyData: [] // API에서 가져온 추천인 계층 데이터\n    };\n  },\n  async mounted() {\n    try {\n      const response = await axios.get('http://localhost:3000/api/users/hierarchy', {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}` // 인증 토큰 전달\n        }\n      });\n\n      // 응답 데이터가 올바르게 가져와졌는지 확인\n      console.log('API 응답 데이터:', response.data);\n      this.hierarchyData = response.data; // 서버에서 계층 데이터를 가져옴\n      this.drawChart(); // 조직도 그리기 함수 호출\n    } catch (error) {\n      console.error('조직도 데이터를 가져오는 중 오류 발생:', error);\n      if (error.response) {\n        console.error('Response error:', error.response.data);\n        console.error('Response status:', error.response.status);\n        console.error('Response headers:', error.response.headers);\n      } else if (error.request) {\n        console.error('Request error:', error.request);\n      } else {\n        console.error('Error message:', error.message);\n      }\n    }\n  },\n  methods: {\n    drawChart() {\n      // Google Charts 로드 확인\n      if (typeof google === 'undefined') {\n        console.error('Google Charts 라이브러리가 로드되지 않았습니다.');\n        return;\n      }\n      google.charts.load('current', {\n        packages: ['orgchart']\n      });\n      google.charts.setOnLoadCallback(() => {\n        const data = new google.visualization.DataTable();\n        data.addColumn('string', 'Name');\n        data.addColumn('string', 'Manager');\n        data.addColumn('string', 'ToolTip');\n\n        // API 데이터를 Google Charts 형식으로 변환\n        this.hierarchyData.forEach(user => {\n          if (!user.user_name || !user.recommender_name) {\n            console.warn('데이터 형식에 문제가 있는 항목:', user);\n          }\n          const userName = user.user_name || ''; // 이름이 없으면 빈 문자열\n\n          data.addRow([user.user_name, user.recommender_name || '',\n          // 추천인이 없으면 루트 노드\n          `${user.user_level} (${user.join_date})`]);\n        });\n\n        // 차트를 그리기 위한 준비가 되었는지 확인\n        if (this.hierarchyData.length === 0) {\n          console.warn('조직도에 표시할 데이터가 없습니다.');\n        }\n        const chart = new google.visualization.OrgChart(document.getElementById('chart_div'));\n        chart.draw(data, {\n          allowHtml: true\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","hierarchyData","mounted","response","get","headers","Authorization","localStorage","getItem","console","log","drawChart","error","status","request","message","methods","google","charts","load","packages","setOnLoadCallback","visualization","DataTable","addColumn","forEach","user","user_name","recommender_name","warn","userName","addRow","user_level","join_date","length","chart","OrgChart","document","getElementById","draw","allowHtml"],"sources":["C:\\Users\\Tm\\my-new-front\\src\\components\\OrgChart.vue"],"sourcesContent":["//OrgChart.vue\r\n\r\n<template>\r\n  <div>\r\n    <h2>추천인 조직도</h2>\r\n    <div id=\"chart_div\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'OrgChart',\r\n  data() {\r\n    return {\r\n      hierarchyData: [], // API에서 가져온 추천인 계층 데이터\r\n    };\r\n  },\r\n  async mounted() {\r\n    try {\r\n      const response = await axios.get('http://localhost:3000/api/users/hierarchy', {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`, // 인증 토큰 전달\r\n        },\r\n      });\r\n      \r\n      // 응답 데이터가 올바르게 가져와졌는지 확인\r\n      console.log('API 응답 데이터:', response.data);\r\n\r\n      this.hierarchyData = response.data; // 서버에서 계층 데이터를 가져옴\r\n      this.drawChart(); // 조직도 그리기 함수 호출\r\n    } catch (error) {\r\n      console.error('조직도 데이터를 가져오는 중 오류 발생:', error);\r\n      if (error.response) {\r\n        console.error('Response error:', error.response.data);\r\n        console.error('Response status:', error.response.status);\r\n        console.error('Response headers:', error.response.headers);\r\n      } else if (error.request) {\r\n        console.error('Request error:', error.request);\r\n      } else {\r\n        console.error('Error message:', error.message);\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    drawChart() {\r\n      // Google Charts 로드 확인\r\n      if (typeof google === 'undefined') {\r\n        console.error('Google Charts 라이브러리가 로드되지 않았습니다.');\r\n        return;\r\n      }\r\n\r\n      google.charts.load('current', { packages: ['orgchart'] });\r\n      google.charts.setOnLoadCallback(() => {\r\n        const data = new google.visualization.DataTable();\r\n        data.addColumn('string', 'Name');\r\n        data.addColumn('string', 'Manager');\r\n        data.addColumn('string', 'ToolTip');\r\n\r\n        // API 데이터를 Google Charts 형식으로 변환\r\n        this.hierarchyData.forEach((user) => {\r\n          if (!user.user_name || !user.recommender_name) {\r\n            console.warn('데이터 형식에 문제가 있는 항목:', user);\r\n          }\r\n\r\n          const userName = user.user_name || '';  // 이름이 없으면 빈 문자열\r\n\r\n          data.addRow([ \r\n            user.user_name, \r\n            user.recommender_name || '', // 추천인이 없으면 루트 노드\r\n            `${user.user_level} (${user.join_date})` \r\n          ]);\r\n        });\r\n\r\n        // 차트를 그리기 위한 준비가 되었는지 확인\r\n        if (this.hierarchyData.length === 0) {\r\n          console.warn('조직도에 표시할 데이터가 없습니다.');\r\n        }\r\n\r\n        const chart = new google.visualization.OrgChart(document.getElementById('chart_div'));\r\n        chart.draw(data, { allowHtml: true });\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#chart_div {\r\n  margin: 20px auto;\r\n  width: 80%;\r\n  height: auto;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}