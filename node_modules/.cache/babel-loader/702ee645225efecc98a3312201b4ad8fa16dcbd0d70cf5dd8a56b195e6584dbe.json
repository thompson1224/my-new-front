{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport axios from 'axios';\nexport default {\n  name: 'OrgChart',\n  data() {\n    return {\n      hierarchyData: [] // API에서 가져온 추천인 계층 데이터\n    };\n  },\n  async mounted() {\n    try {\n      const response = await axios.get('http://localhost:3000/api/users/hierarchy', {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}` // 인증 토큰 전달\n        }\n      });\n\n      // 응답 데이터가 올바르게 가져와졌는지 확인\n      console.log('API 응답 데이터:', response.data);\n      this.hierarchyData = response.data; // 서버에서 계층 데이터를 가져옴\n      this.drawChart(); // 조직도 그리기 함수 호출\n    } catch (error) {\n      console.error('조직도 데이터를 가져오는 중 오류 발생:', error);\n      if (error.response) {\n        console.error('Response error:', error.response.data);\n        console.error('Response status:', error.response.status);\n        console.error('Response headers:', error.response.headers);\n      } else if (error.request) {\n        console.error('Request error:', error.request);\n      } else {\n        console.error('Error message:', error.message);\n      }\n    }\n  },\n  methods: {\n    drawChart() {\n      google.charts.load('current', {\n        packages: ['orgchart']\n      });\n      google.charts.setOnLoadCallback(() => {\n        const data = new google.visualization.DataTable();\n        data.addColumn('string', 'Name');\n        data.addColumn('string', 'Manager');\n        data.addColumn('string', 'ToolTip');\n        console.log('Hierarchy Data:', this.hierarchyData); // API에서 받은 데이터 확인\n\n        // API 데이터를 Google Charts 형식으로 변환\n        this.hierarchyData.forEach(user => {\n          // 각 사용자에서 필요한 값들을 추출\n          const userName = user.user_name || '이름 없음'; // 이름이 없으면 '이름 없음'으로 처리\n          const recommenderName = user.recommender_name === '없음' ? null : user.recommender_name || '추천인 없음'; // '없음'일 경우 null 처리\n          const userLevel = user.user_level || '레벨 없음'; // 유저 레벨이 없으면 '레벨 없음'\n          const joinDate = user.join_date || '가입일 없음'; // 가입 날짜가 없으면 '가입일 없음'\n\n          console.log('Adding row:', userName, recommenderName, `${userLevel} (${joinDate})`); // 추가되는 행 확인\n\n          // Google Charts 데이터에 행 추가\n          data.addRow([userName, recommenderName, `${userLevel} (${joinDate})`]);\n        });\n\n        // Google Chart로 그리기\n        const chart = new google.visualization.OrgChart(document.getElementById('chart_div'));\n        chart.draw(data, {\n          allowHtml: true\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","hierarchyData","mounted","response","get","headers","Authorization","localStorage","getItem","console","log","drawChart","error","status","request","message","methods","google","charts","load","packages","setOnLoadCallback","visualization","DataTable","addColumn","forEach","user","userName","user_name","recommenderName","recommender_name","userLevel","user_level","joinDate","join_date","addRow","chart","OrgChart","document","getElementById","draw","allowHtml"],"sources":["C:\\Users\\Tm\\my-new-front\\src\\components\\OrgChart.vue"],"sourcesContent":["//OrgChart.vue\r\n\r\n<template>\r\n  <div>\r\n    <h2>추천인 조직도</h2>\r\n    <div id=\"chart_div\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'OrgChart',\r\n  data() {\r\n    return {\r\n      hierarchyData: [], // API에서 가져온 추천인 계층 데이터\r\n    };\r\n  },\r\n  async mounted() {\r\n    try {\r\n      const response = await axios.get('http://localhost:3000/api/users/hierarchy', {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`, // 인증 토큰 전달\r\n        },\r\n      });\r\n      \r\n      // 응답 데이터가 올바르게 가져와졌는지 확인\r\n      console.log('API 응답 데이터:', response.data);\r\n\r\n      this.hierarchyData = response.data; // 서버에서 계층 데이터를 가져옴\r\n      this.drawChart(); // 조직도 그리기 함수 호출\r\n    } catch (error) {\r\n      console.error('조직도 데이터를 가져오는 중 오류 발생:', error);\r\n      if (error.response) {\r\n        console.error('Response error:', error.response.data);\r\n        console.error('Response status:', error.response.status);\r\n        console.error('Response headers:', error.response.headers);\r\n      } else if (error.request) {\r\n        console.error('Request error:', error.request);\r\n      } else {\r\n        console.error('Error message:', error.message);\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    drawChart() {\r\n  google.charts.load('current', { packages: ['orgchart'] });\r\n  google.charts.setOnLoadCallback(() => {\r\n    const data = new google.visualization.DataTable();\r\n    data.addColumn('string', 'Name');\r\n    data.addColumn('string', 'Manager');\r\n    data.addColumn('string', 'ToolTip');\r\n\r\n    console.log('Hierarchy Data:', this.hierarchyData); // API에서 받은 데이터 확인\r\n\r\n    // API 데이터를 Google Charts 형식으로 변환\r\n    this.hierarchyData.forEach((user) => {\r\n      // 각 사용자에서 필요한 값들을 추출\r\n      const userName = user.user_name || '이름 없음';  // 이름이 없으면 '이름 없음'으로 처리\r\n      const recommenderName = user.recommender_name === '없음' ? null : user.recommender_name || '추천인 없음'; // '없음'일 경우 null 처리\r\n      const userLevel = user.user_level || '레벨 없음';  // 유저 레벨이 없으면 '레벨 없음'\r\n      const joinDate = user.join_date || '가입일 없음';  // 가입 날짜가 없으면 '가입일 없음'\r\n\r\n      console.log('Adding row:', userName, recommenderName, `${userLevel} (${joinDate})`); // 추가되는 행 확인\r\n\r\n      // Google Charts 데이터에 행 추가\r\n      data.addRow([userName, recommenderName, `${userLevel} (${joinDate})`]);\r\n    });\r\n\r\n    // Google Chart로 그리기\r\n    const chart = new google.visualization.OrgChart(document.getElementById('chart_div'));\r\n    chart.draw(data, { allowHtml: true });\r\n  });\r\n},\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#chart_div {\r\n  margin: 20px auto;\r\n  width: 100%; /* 너비를 100%로 설정 */\r\n  height: 400px; /* 높이를 명시적으로 설정 */\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}