{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  style: {\n    \"margin-top\": \"20px\",\n    \"color\": \"gray\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"h1\", null, \"로그인\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.login && $options.login(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.email = $event),\n    placeholder: \"Email\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.email]]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.password = $event),\n    type: \"password\",\n    placeholder: \"Password\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.password]]), _cache[3] || (_cache[3] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"로그인\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), _createCommentVNode(\" 디버깅을 위한 상태 표시 \"), $data.debugInfo ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"pre\", null, _toDisplayString($data.debugInfo), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","style","_createElementBlock","_createElementVNode","onSubmit","_cache","_withModifiers","args","$options","login","$event","$data","email","placeholder","required","password","type","_createCommentVNode","debugInfo","_hoisted_1","_toDisplayString"],"sources":["C:\\Users\\Tm\\my-new-front\\src\\views\\Login.vue"],"sourcesContent":["// Login.vue\r\n<template>\r\n  <div>\r\n    <h1>로그인</h1>\r\n    <form @submit.prevent=\"login\">\r\n      <input v-model=\"email\" placeholder=\"Email\" required />\r\n      <input v-model=\"password\" type=\"password\" placeholder=\"Password\" required />\r\n      <button type=\"submit\">로그인</button>\r\n    </form>\r\n    <!-- 디버깅을 위한 상태 표시 -->\r\n    <div v-if=\"debugInfo\" style=\"margin-top: 20px; color: gray;\">\r\n      <pre>{{ debugInfo }}</pre>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'UserLogin',\r\n  data() {\r\n    return {\r\n      email: '',\r\n      password: '',\r\n      debugInfo: null\r\n    }\r\n  },\r\n  methods: {\r\n    async login() {\r\n      this.debugInfo = '로그인 시도 중...'\r\n      \r\n      try {\r\n        // 요청 전 상태 확인\r\n        console.log('Login attempt with:', { email: this.email })\r\n        \r\n        const response = await axios.post('http://localhost:3000/login', {\r\n          email: this.email,\r\n          password: this.password,\r\n        })\r\n        \r\n        // 응답 확인\r\n        console.log('Server response:', response.data)\r\n        this.debugInfo = `서버 응답: ${JSON.stringify(response.data, null, 2)}`\r\n        \r\n        if (response.data.token) {\r\n          // 토큰 저장\r\n          localStorage.setItem('token', response.data.token)\r\n          console.log('Token saved:', response.data.token)\r\n          this.debugInfo += '\\n토큰 저장됨'\r\n          \r\n          // 리디렉션 시도\r\n          const redirectPath = this.$route.query.redirect || '/main'\r\n          console.log('Attempting redirect to:', redirectPath)\r\n          this.debugInfo += `\\n${redirectPath}로 리디렉션 시도 중...`\r\n          \r\n          try {\r\n            await this.$router.push(redirectPath)\r\n            console.log('Redirect successful')\r\n          } catch (routerError) {\r\n            console.error('Router error:', routerError)\r\n            this.debugInfo += `\\n라우터 에러: ${routerError.message}`\r\n          }\r\n        } else {\r\n          throw new Error('Token not received from server')\r\n        }\r\n      } catch (error) {\r\n        console.error('Login error:', error)\r\n        this.debugInfo = `로그인 에러: ${error.message}`\r\n        if (error.response) {\r\n          this.debugInfo += `\\n서버 응답: ${JSON.stringify(error.response.data, null, 2)}`\r\n        }\r\n        alert('로그인 실패: ' + (error.response?.data?.message || '알 수 없는 오류가 발생했습니다.'))\r\n      }\r\n    },\r\n  },\r\n  // 컴포넌트 마운트 시 라우터 상태 확인\r\n  mounted() {\r\n    console.log('Current route:', this.$route)\r\n    console.log('Router instance:', this.$router)\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nform {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  max-width: 300px;\r\n  margin: 0 auto;\r\n}\r\n\r\ninput, button {\r\n  padding: 8px;\r\n  margin: 5px 0;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n</style>"],"mappings":";;EAAAA,GAAA;EAU0BC,KAAsC,EAAtC;IAAA;IAAA;EAAA;;;uBARxBC,mBAAA,CAWM,c,0BAVJC,mBAAA,CAAY,YAAR,KAAG,sBACPA,mBAAA,CAIO;IAJAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAJjBC,cAAA,KAAAC,IAAA,KAI2BC,QAAA,CAAAC,KAAA,IAAAD,QAAA,CAAAC,KAAA,IAAAF,IAAA,CAAK;sBAC1BJ,mBAAA,CAAsD;IAL5D,uBAAAE,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAKsBC,KAAA,CAAAC,KAAK,GAAAF,MAAA;IAAEG,WAAW,EAAC,OAAO;IAACC,QAAQ,EAAR;iDAA3BH,KAAA,CAAAC,KAAK,E,mBACrBT,mBAAA,CAA4E;IANlF,uBAAAE,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAMsBC,KAAA,CAAAI,QAAQ,GAAAL,MAAA;IAAEM,IAAI,EAAC,UAAU;IAACH,WAAW,EAAC,UAAU;IAACC,QAAQ,EAAR;iDAAjDH,KAAA,CAAAI,QAAQ,E,6BACxBZ,mBAAA,CAAkC;IAA1Ba,IAAI,EAAC;EAAQ,GAAC,KAAG,qB,4BAE3BC,mBAAA,mBAAsB,EACXN,KAAA,CAAAO,SAAS,I,cAApBhB,mBAAA,CAEM,OAFNiB,UAEM,GADJhB,mBAAA,CAA0B,aAAAiB,gBAAA,CAAlBT,KAAA,CAAAO,SAAS,iB,KAXvBD,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}