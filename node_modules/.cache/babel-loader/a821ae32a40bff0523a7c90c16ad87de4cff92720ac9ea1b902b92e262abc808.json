{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'UserLogin',\n  data() {\n    return {\n      email: '',\n      password: '',\n      debugInfo: null\n    };\n  },\n  methods: {\n    async login() {\n      this.debugInfo = '로그인 시도 중...';\n      try {\n        // 요청 전 상태 확인\n        console.log('Login attempt with:', {\n          email: this.email\n        });\n        const response = await axios.post('http://localhost:3000/login', {\n          email: this.email,\n          password: this.password\n        });\n\n        // 응답 확인\n        console.log('Server response:', response.data);\n        this.debugInfo = `서버 응답: ${JSON.stringify(response.data, null, 2)}`;\n        if (response.data.token) {\n          // 토큰 저장\n          localStorage.setItem('token', response.data.token);\n          console.log('Token saved:', response.data.token);\n          this.debugInfo += '\\n토큰 저장됨';\n\n          // 리디렉션 시도\n          const redirectPath = this.$route.query.redirect || '/main';\n          console.log('Attempting redirect to:', redirectPath);\n          this.debugInfo += `\\n${redirectPath}로 리디렉션 시도 중...`;\n          try {\n            await this.$router.push(redirectPath);\n            console.log('Redirect successful');\n          } catch (routerError) {\n            console.error('Router error:', routerError);\n            this.debugInfo += `\\n라우터 에러: ${routerError.message}`;\n          }\n        } else {\n          throw new Error('Token not received from server');\n        }\n      } catch (error) {\n        console.error('Login error:', error);\n        this.debugInfo = `로그인 에러: ${error.message}`;\n        if (error.response) {\n          this.debugInfo += `\\n서버 응답: ${JSON.stringify(error.response.data, null, 2)}`;\n        }\n        alert('로그인 실패: ' + (error.response?.data?.message || '알 수 없는 오류가 발생했습니다.'));\n      }\n    }\n  },\n  // 컴포넌트 마운트 시 라우터 상태 확인\n  mounted() {\n    console.log('Current route:', this.$route);\n    console.log('Router instance:', this.$router);\n  }\n};","map":{"version":3,"names":["axios","name","data","email","password","debugInfo","methods","login","console","log","response","post","JSON","stringify","token","localStorage","setItem","redirectPath","$route","query","redirect","$router","push","routerError","error","message","Error","alert","mounted"],"sources":["C:\\Users\\Tm\\my-new-front\\src\\views\\Login.vue"],"sourcesContent":["// Login.vue\r\n<template>\r\n  <div>\r\n    <h1>로그인</h1>\r\n    <form @submit.prevent=\"login\">\r\n      <input v-model=\"email\" placeholder=\"Email\" required />\r\n      <input v-model=\"password\" type=\"password\" placeholder=\"Password\" required />\r\n      <button type=\"submit\">로그인</button>\r\n    </form>\r\n    <!-- 디버깅을 위한 상태 표시 -->\r\n    <div v-if=\"debugInfo\" style=\"margin-top: 20px; color: gray;\">\r\n      <pre>{{ debugInfo }}</pre>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'UserLogin',\r\n  data() {\r\n    return {\r\n      email: '',\r\n      password: '',\r\n      debugInfo: null\r\n    }\r\n  },\r\n  methods: {\r\n    async login() {\r\n      this.debugInfo = '로그인 시도 중...'\r\n      \r\n      try {\r\n        // 요청 전 상태 확인\r\n        console.log('Login attempt with:', { email: this.email })\r\n        \r\n        const response = await axios.post('http://localhost:3000/login', {\r\n          email: this.email,\r\n          password: this.password,\r\n        })\r\n        \r\n        // 응답 확인\r\n        console.log('Server response:', response.data)\r\n        this.debugInfo = `서버 응답: ${JSON.stringify(response.data, null, 2)}`\r\n        \r\n        if (response.data.token) {\r\n          // 토큰 저장\r\n          localStorage.setItem('token', response.data.token)\r\n          console.log('Token saved:', response.data.token)\r\n          this.debugInfo += '\\n토큰 저장됨'\r\n          \r\n          // 리디렉션 시도\r\n          const redirectPath = this.$route.query.redirect || '/main'\r\n          console.log('Attempting redirect to:', redirectPath)\r\n          this.debugInfo += `\\n${redirectPath}로 리디렉션 시도 중...`\r\n          \r\n          try {\r\n            await this.$router.push(redirectPath)\r\n            console.log('Redirect successful')\r\n          } catch (routerError) {\r\n            console.error('Router error:', routerError)\r\n            this.debugInfo += `\\n라우터 에러: ${routerError.message}`\r\n          }\r\n        } else {\r\n          throw new Error('Token not received from server')\r\n        }\r\n      } catch (error) {\r\n        console.error('Login error:', error)\r\n        this.debugInfo = `로그인 에러: ${error.message}`\r\n        if (error.response) {\r\n          this.debugInfo += `\\n서버 응답: ${JSON.stringify(error.response.data, null, 2)}`\r\n        }\r\n        alert('로그인 실패: ' + (error.response?.data?.message || '알 수 없는 오류가 발생했습니다.'))\r\n      }\r\n    },\r\n  },\r\n  // 컴포넌트 마운트 시 라우터 상태 확인\r\n  mounted() {\r\n    console.log('Current route:', this.$route)\r\n    console.log('Router instance:', this.$router)\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nform {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  max-width: 300px;\r\n  margin: 0 auto;\r\n}\r\n\r\ninput, button {\r\n  padding: 8px;\r\n  margin: 5px 0;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n</style>"],"mappings":";AAiBA,OAAOA,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE;IACb;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,KAAKA,CAAA,EAAG;MACZ,IAAI,CAACF,SAAQ,GAAI,aAAY;MAE7B,IAAI;QACF;QACAG,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE;UAAEN,KAAK,EAAE,IAAI,CAACA;QAAM,CAAC;QAExD,MAAMO,QAAO,GAAI,MAAMV,KAAK,CAACW,IAAI,CAAC,6BAA6B,EAAE;UAC/DR,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBC,QAAQ,EAAE,IAAI,CAACA;QACjB,CAAC;;QAED;QACAI,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,QAAQ,CAACR,IAAI;QAC7C,IAAI,CAACG,SAAQ,GAAI,UAAUO,IAAI,CAACC,SAAS,CAACH,QAAQ,CAACR,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAC;QAElE,IAAIQ,QAAQ,CAACR,IAAI,CAACY,KAAK,EAAE;UACvB;UACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEN,QAAQ,CAACR,IAAI,CAACY,KAAK;UACjDN,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEC,QAAQ,CAACR,IAAI,CAACY,KAAK;UAC/C,IAAI,CAACT,SAAQ,IAAK,UAAS;;UAE3B;UACA,MAAMY,YAAW,GAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,QAAO,IAAK,OAAM;UACzDZ,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEQ,YAAY;UACnD,IAAI,CAACZ,SAAQ,IAAK,KAAKY,YAAY,gBAAe;UAElD,IAAI;YACF,MAAM,IAAI,CAACI,OAAO,CAACC,IAAI,CAACL,YAAY;YACpCT,OAAO,CAACC,GAAG,CAAC,qBAAqB;UACnC,EAAE,OAAOc,WAAW,EAAE;YACpBf,OAAO,CAACgB,KAAK,CAAC,eAAe,EAAED,WAAW;YAC1C,IAAI,CAAClB,SAAQ,IAAK,aAAakB,WAAW,CAACE,OAAO,EAAC;UACrD;QACF,OAAO;UACL,MAAM,IAAIC,KAAK,CAAC,gCAAgC;QAClD;MACF,EAAE,OAAOF,KAAK,EAAE;QACdhB,OAAO,CAACgB,KAAK,CAAC,cAAc,EAAEA,KAAK;QACnC,IAAI,CAACnB,SAAQ,GAAI,WAAWmB,KAAK,CAACC,OAAO,EAAC;QAC1C,IAAID,KAAK,CAACd,QAAQ,EAAE;UAClB,IAAI,CAACL,SAAQ,IAAK,YAAYO,IAAI,CAACC,SAAS,CAACW,KAAK,CAACd,QAAQ,CAACR,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAC;QAC7E;QACAyB,KAAK,CAAC,UAAS,IAAKH,KAAK,CAACd,QAAQ,EAAER,IAAI,EAAEuB,OAAM,IAAK,oBAAoB,CAAC;MAC5E;IACF;EACF,CAAC;EACD;EACAG,OAAOA,CAAA,EAAG;IACRpB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACS,MAAM;IACzCV,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAACY,OAAO;EAC9C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}