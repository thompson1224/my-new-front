{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\n// router/index.js\nimport { createRouter, createWebHistory } from 'vue-router';\nimport HomeView from '../views/HomeView.vue';\nimport Login from '../views/Login.vue';\nimport Signup from '../views/Signup.vue';\nimport MainPage from '../views/MainPage.vue';\nimport ProductPage from '../views/ProductPage.vue';\nconst routes = [{\n  path: '/',\n  name: 'Home',\n  component: HomeView\n}, {\n  path: '/login',\n  name: 'Login',\n  component: Login\n}, {\n  path: '/signup',\n  name: 'Signup',\n  component: Signup\n}, {\n  path: '/main',\n  name: 'MainPage',\n  component: MainPage,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/products',\n  name: 'ProductPage',\n  component: ProductPage\n}, {\n  path: '/product/:id',\n  // 상품 상세 페이지 경로\n  name: 'ProductDetail',\n  component: ProductDetail,\n  props: true // URL 매개변수를 컴포넌트로 전달\n}];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\n\n// 디버깅을 위한 네비게이션 가드\nrouter.beforeEach((to, from, next) => {\n  console.log('Navigation triggered:', {\n    from: from.path,\n    to: to.path\n  });\n  const token = localStorage.getItem('token');\n  console.log('Current token:', token ? 'exists' : 'not found');\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    console.log('Route requires auth');\n    if (!token) {\n      console.log('No token found, redirecting to login');\n      next({\n        path: '/login',\n        query: {\n          redirect: to.fullPath\n        }\n      });\n    } else {\n      console.log('Token found, proceeding to route');\n      next();\n    }\n  } else {\n    console.log('Route does not require auth');\n    next();\n  }\n});\nrouter.afterEach((to, from) => {\n  console.log('Navigation completed:', {\n    from: from.path,\n    to: to.path\n  });\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","HomeView","Login","Signup","MainPage","ProductPage","routes","path","name","component","meta","requiresAuth","ProductDetail","props","router","history","beforeEach","to","from","next","console","log","token","localStorage","getItem","matched","some","record","query","redirect","fullPath","afterEach"],"sources":["C:/Users/Tm/my-new-front/src/router/index.js"],"sourcesContent":["// router/index.js\nimport { createRouter, createWebHistory } from 'vue-router'\nimport HomeView from '../views/HomeView.vue'\nimport Login from '../views/Login.vue'\nimport Signup from '../views/Signup.vue'\nimport MainPage from '../views/MainPage.vue'\nimport ProductPage from '../views/ProductPage.vue';\n\n\nconst routes = [\n  {\n    path: '/',\n    name: 'Home',\n    component: HomeView\n  },\n  {\n    path: '/login',\n    name: 'Login',\n    component: Login\n  },\n  {\n    path: '/signup',\n    name: 'Signup',\n    component: Signup\n  },\n  {\n    path: '/main',\n    name: 'MainPage',\n    component: MainPage,\n    meta: { requiresAuth: true }\n  },\n  {\n    path: '/products',\n    name: 'ProductPage',\n    component: ProductPage\n  },\n  {\n    path: '/product/:id', // 상품 상세 페이지 경로\n    name: 'ProductDetail',\n    component: ProductDetail,\n    props: true, // URL 매개변수를 컴포넌트로 전달\n  },\n]\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n})\n\n// 디버깅을 위한 네비게이션 가드\nrouter.beforeEach((to, from, next) => {\n  console.log('Navigation triggered:', { from: from.path, to: to.path })\n  \n  const token = localStorage.getItem('token')\n  console.log('Current token:', token ? 'exists' : 'not found')\n  \n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    console.log('Route requires auth')\n    if (!token) {\n      console.log('No token found, redirecting to login')\n      next({\n        path: '/login',\n        query: { redirect: to.fullPath }\n      })\n    } else {\n      console.log('Token found, proceeding to route')\n      next()\n    }\n  } else {\n    console.log('Route does not require auth')\n    next()\n  }\n})\n\nrouter.afterEach((to, from) => {\n  console.log('Navigation completed:', { from: from.path, to: to.path })\n})\n\nexport default router"],"mappings":";;AAAA;AACA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,WAAW,MAAM,0BAA0B;AAGlD,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAER;AACb,CAAC,EACD;EACEM,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEP;AACb,CAAC,EACD;EACEK,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAEN;AACb,CAAC,EACD;EACEI,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEL,QAAQ;EACnBM,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEJ,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,aAAa;EACnBC,SAAS,EAAEJ;AACb,CAAC,EACD;EACEE,IAAI,EAAE,cAAc;EAAE;EACtBC,IAAI,EAAE,eAAe;EACrBC,SAAS,EAAEG,aAAa;EACxBC,KAAK,EAAE,IAAI,CAAE;AACf,CAAC,CACF;AAED,MAAMC,MAAM,GAAGf,YAAY,CAAC;EAC1BgB,OAAO,EAAEf,gBAAgB,CAAC,CAAC;EAC3BM;AACF,CAAC,CAAC;;AAEF;AACAQ,MAAM,CAACE,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE;IAAEH,IAAI,EAAEA,IAAI,CAACX,IAAI;IAAEU,EAAE,EAAEA,EAAE,CAACV;EAAK,CAAC,CAAC;EAEtE,MAAMe,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3CJ,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,KAAK,GAAG,QAAQ,GAAG,WAAW,CAAC;EAE7D,IAAIL,EAAE,CAACQ,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACjB,IAAI,CAACC,YAAY,CAAC,EAAE;IACvDS,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,IAAI,CAACC,KAAK,EAAE;MACVF,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnDF,IAAI,CAAC;QACHZ,IAAI,EAAE,QAAQ;QACdqB,KAAK,EAAE;UAAEC,QAAQ,EAAEZ,EAAE,CAACa;QAAS;MACjC,CAAC,CAAC;IACJ,CAAC,MAAM;MACLV,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/CF,IAAI,CAAC,CAAC;IACR;EACF,CAAC,MAAM;IACLC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1CF,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAEFL,MAAM,CAACiB,SAAS,CAAC,CAACd,EAAE,EAAEC,IAAI,KAAK;EAC7BE,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE;IAAEH,IAAI,EAAEA,IAAI,CAACX,IAAI;IAAEU,EAAE,EAAEA,EAAE,CAACV;EAAK,CAAC,CAAC;AACxE,CAAC,CAAC;AAEF,eAAeO,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}